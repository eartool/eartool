// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`processProject Conflicting imports work 1`] = `
"//

//
// PATH: '/bar.ts'
//

export type Props = { hi: "mom" };
,//

//
// PATH: '/baz.ts'
//
import { Props as BarProps } from "./bar";
import { Props as FooProps } from "./foo";
export type Props = FooProps & BarProps;
,//

//
// PATH: '/foo.ts'
//

export type Props = { hi: "mom" };
"
`;

exports[`processProject Generics work 1`] = `
"//

//
// PATH: '/bar.ts'
//
import { OwnProps as MapElementViewerPropertiesOwnProps } from "./foo";

export type Foo<T extends MapElement> = MapElementViewerPropertiesOwnProps<T>;
,//

//
// PATH: '/foo.ts'
//

export interface OwnProps<T extends MapElement> {
  mapElement: T;
  locked: boolean;
  section: RightMapPanelType;
}

export interface StoreProps {
  mapDataState: MapDataState;
}

export interface NectarProps {
  dispatch: Dispatch;
}

export type Props<T extends MapElement> = OwnProps<T> &
  StoreProps &
  NectarProps;
"
`;

exports[`processProject combined types 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export interface OgreProps {
  properties: Property<any>[];
}

export interface ReduxProps {
  appRealmId: RealmId;
  mapConfig: GaiaMapConfig;
}

export interface State {
  map?: MapSearchResult;
  user?: IAcmeUser;
  isLoading: boolean;
}

export type Props = OverviewObjectMinProps & OgreProps & ReduxProps;
"
`;

exports[`processProject doesnt clobber component exports 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export interface Props {
  what: number;
}

export class Foo extends React.Component<Props> {}
,//

//
// PATH: '/index.ts'
//
export { Foo, type Props as FooProps } from "./foo";
"
`;

exports[`processProject dont explode if error 1`] = `
"//

//
// PATH: '/foo.ts'
//
const foo = 5;

export namespace Wat {
  export const foo = 6;
}
"
`;

exports[`processProject function invoke within namespace 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export function barForFoo() {
  bazForFoo();
}

export function bazForFoo() {
  return 5;
}
"
`;

exports[`processProject redeclare export 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export function barForFoo() {
  return 5;
}

export function bazForFoo() {
  return 5;
}

export type ThingForFoo = string;

export interface Props {
  what: ThingForFoo;
}
,//

//
// PATH: '/index.ts'
//
export {
  barForFoo,
  bazForFoo,
  type Props as FooProps,
  type ThingForFoo,
} from "./foo";
"
`;

exports[`processProject redeclare export w funky names 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export type ThingFooBar = string;

export const doFooForFooBar = () => 5;

export const VAR_FOO_BAR = 5;
,//

//
// PATH: '/index.ts'
//
export { VAR_FOO_BAR, doFooForFooBar, type ThingFooBar } from "./foo";
"
`;

exports[`processProject redeclare export with ordering 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export interface Props {
  what: Thing;
}
,//

//
// PATH: '/index.ts'
//
export const before = 5;
export { type Props as FooProps } from "./foo";
export const after = 5;
"
`;

exports[`processProject rename in other file 1`] = `
"//

//
// PATH: '/refWat.ts'
//
import { BazForWat, FooForWat, fForWat, keyForWat } from "./wat";

console.log(keyForWat);
console.log(fForWat());
console.log(new FooForWat());
const f: BazForWat = "hi";
,//

//
// PATH: '/wat.ts'
//

export const keyForWat = 3;
export function fForWat() {
  return 5;
}

export class FooForWat {}

export type BazForWat = string;
"
`;

exports[`processProject simple 1`] = `
"//

//
// PATH: '/foo.ts'
//
const foo = 5;

export const aasdfForWat = 3;
export const secondForWat = 5;

export const thirdSpacedForWat = 56;

// Foo
export const fourthWithCommentForWat = 555;
"
`;

exports[`processProject works nicely with interfaces 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export interface Props {
  what: number;
}

class Foo extends React.Component<Props> {}
,//

//
// PATH: '/index.ts'
//
export { type Props as FooProps } from "./foo";
"
`;
