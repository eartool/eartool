// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`processProject Conflicting imports work exclusive 1`] = `
"//

//
// PATH: '/bar.ts'
//

export type Props = { hi: "mom" };
,//

//
// PATH: '/baz.ts'
//
import * as Bar from "./bar";
import * as Foo from "./foo";
export type Props = Foo.Props & Bar.Props;
,//

//
// PATH: '/foo.ts'
//

export type Props = { hi: "mom" };
"
`;

exports[`processProject Conflicting imports work mixed 1`] = `
"//

//
// PATH: '/bar.ts'
//

export type Props = { hi: "mom" };
,//

//
// PATH: '/baz.ts'
//
import * as Bar from "./bar";
import { Props as FooProps } from "./foo";
export type Props = FooProps & Bar.Props;
,//

//
// PATH: '/foo.ts'
//

export type Props = { hi: "mom" };

export function Foo() {}
"
`;

exports[`processProject Conflicting imports work non-exclusive 1`] = `
"//

//
// PATH: '/bar.ts'
//

export type Props = { hi: "mom" };

export function Bar() {}
,//

//
// PATH: '/baz.ts'
//
import { Props as BarProps } from "./bar";
import { Props as FooProps } from "./foo";
export type Props = FooProps & BarProps;
,//

//
// PATH: '/foo.ts'
//

export type Props = { hi: "mom" };

export function Foo() {}
"
`;

exports[`processProject Doesn't change as const that has constnats 1`] = `
"//

//
// PATH: '/foo.ts'
//
export const Foo = {
  // direct function
  baz() {
    return 5;
  },

  bar: () => {
    return 6;
  },

  FOO: 7,
} as const;
,//

//
// PATH: '/index.ts'
//
export { Foo } from "./foo";
"
`;

exports[`processProject Doesn't produce extra import statements 1`] = `
"//

//
// PATH: '/bar.ts'
//
import { createFoo, otherForFoo, Foo } from "./foo";

doStuff(createFoo());
doStuff(createFoo());
doStuff(otherForFoo());
,//

//
// PATH: '/foo.ts'
//

export function createFoo() {}
export function otherForFoo() {}

export interface Foo {
  readonly foo: string;
}
"
`;

exports[`processProject Doesnt mess up indirect imports 1`] = `
"//

//
// PATH: '/index.ts'
//
import { Selectors } from "./cases";
export const foo = Selectors.doStuff();
,//

//
// PATH: '/cases/index.ts'
//
export * as Selectors from "./selectors";
,//

//
// PATH: '/cases/selectors.ts'
//

export const doStuff = () => 5;
"
`;

exports[`processProject Enums rename properly 1`] = `
"//

//
// PATH: '/dialog.ts'
//
export type DialogMode = A | B;

export enum TypeForDialogMode {
  A = "A",
  B = "B",
}

export function isAForDialogMode(dialog: DialogMode): dialog is A {
  // Fully qualified
  return dialog.type === TypeForDialogMode.A;
}

export function isBForDialogMode(dialog: DialogMode): dialog is B {
  // Local to namespace
  return dialog.type === TypeForDialogMode.B;
}

export interface A {
  type: TypeForDialogMode.A;
}

export interface B {
  type: TypeForDialogMode.B;
  onConfirm: () => void;
}
,//

//
// PATH: '/index.ts'
//
"
`;

exports[`processProject Fixes export star 1`] = `
"//

//
// PATH: '/index.ts'
//
export { Stuff } from "./stuff";
,//

//
// PATH: '/cases/index.ts'
//
export * as Selectors from "./selectors";
,//

//
// PATH: '/cases/selectors.ts'
//

export const doStuff = () => 5;
,//

//
// PATH: '/inbox/Inbox.ts'
//
import { Selectors as CaseSelectors } from "./cases";

CaseSelectors.doStuff();
"
`;

exports[`processProject Fixes the exported type 1`] = `
"//

//
// PATH: '/index.ts'
//
export { getInitialStateForStuff, type Stuff } from "./stuff";
,//

//
// PATH: '/stuff/index.ts'
//
export interface Stuff {
  hi: string;
}

export const getInitialStateForStuff = defaultMemoize((): Stuff => {
  return {
    hi: "mom",
  };
});
,//

//
// PATH: '/thing/index.ts'
//
import { getInitialStateForStuff } from "../stuff";

getInitialStateForStuff();
"
`;

exports[`processProject Generics work 1`] = `
"//

//
// PATH: '/bar.ts'
//
import { OwnProps as MapElementViewerPropertiesOwnProps } from "./foo";

export type Foo<T extends MapElement> = MapElementViewerPropertiesOwnProps<T>;
,//

//
// PATH: '/foo.ts'
//

export interface OwnProps<T extends MapElement> {
  mapElement: T;
  locked: boolean;
  section: RightMapPanelType;
}

export interface StoreProps {
  mapDataState: MapDataState;
}

export interface NectarProps {
  dispatch: Dispatch;
}

export type Props<T extends MapElement> = OwnProps<T> &
  StoreProps &
  NectarProps;

export function MapElementViewerProperties() {}
"
`;

exports[`processProject Generics work with additional 1`] = `
"//

//
// PATH: '/bar.ts'
//
import { Moo } from "somelib";
import { OwnProps as MapElementViewerPropertiesOwnProps } from "./foo";

export type Foo<T extends MapElement & Moo.Cow> =
  MapElementViewerPropertiesOwnProps<T>;
,//

//
// PATH: '/foo.ts'
//

export interface OwnProps<T extends MapElement> {
  mapElement: T;
  locked: boolean;
  section: RightMapPanelType;
}

export interface StoreProps {
  mapDataState: MapDataState;
}

export interface NectarProps {
  dispatch: Dispatch;
}

export type Props<T extends MapElement> = OwnProps<T> &
  StoreProps &
  NectarProps;

export function MapElementViewerProperties() {}
"
`;

exports[`processProject Handles const pattern nicely 1`] = `
"//

//
// PATH: '/alias.ts'
//
import * as Bar from "./foo";

console.log(Bar.bar());
console.log(Bar.baz());
,//

//
// PATH: '/bar.ts'
//
import * as Foo from "./foo";

console.log(Foo.bar());
console.log(Foo.baz());
,//

//
// PATH: '/foo.ts'
//

// direct function
export function baz() {
  return 5;
}

export const bar = () => {
  return 6;
};
,//

//
// PATH: '/index.ts'
//
export * as Foo from "./foo";
"
`;

exports[`processProject Handles in file references to faux namespaces 1`] = `
"//

//
// PATH: '/foo.ts'
//

// direct function
export function baz() {
  return 5;
}

export const bar = () => {
  return baz();
};
,//

//
// PATH: '/index.ts'
//
export * as Foo from "./foo";
"
`;

exports[`processProject Handles local variable name collisions inside functions 1`] = `
"//

//
// PATH: '/sourceInstances.ts'
//
import { SourceInstance } from "../types/sourceInstance";

interface FromArgs {
  readonly isFirst: boolean;
  readonly isLast: boolean;
}

export function isFirst(instance: SourceInstance) {
  return instance === SourceInstance.FIRST || instance === SourceInstance.ONLY;
}

export function isLast(instance: SourceInstance) {
  return instance === SourceInstance.LAST || instance === SourceInstance.ONLY;
}

export function from({ isFirst: isFirst0, isLast: reduce0 }: FromArgs) {
  if (isFirst0) {
    return reduce0 ? SourceInstance.ONLY : SourceInstance.FIRST;
  } else {
    return reduce0 ? SourceInstance.LAST : SourceInstance.INNER;
  }
}
export function reduce(instance1: SourceInstance, instance2: SourceInstance) {
  const isFirst0 = isFirst(instance1) && isFirst(instance2);
  const isLast0 = isLast(instance1) && isLast(instance2);

  function from0() {
    console.log(t);
  }
  from0();
  return from({ isFirst: isFirst0, isLast: isLast0 });
}
"
`;

exports[`processProject Handles namespace like faux namespace when possible 1`] = `
"//

//
// PATH: '/alias.ts'
//
import * as Bar from "./foo";

console.log(Bar.bar());
console.log(Bar.baz());
,//

//
// PATH: '/bar.ts'
//
import * as Foo from "./foo";

console.log(Foo.bar());
console.log(Foo.baz());
,//

//
// PATH: '/foo.ts'
//

// direct function
export function baz() {
  return 5;
}

export const bar = () => {
  return 6;
};
,//

//
// PATH: '/index.ts'
//
export * as Foo from "./foo";
"
`;

exports[`processProject Multiple things in the file 1`] = `
"//

//
// PATH: '/bar.ts'
//
import { MetadataValue, foo } from "./foo";

console.log(MetadataValue.doThing());
console.log(foo());
,//

//
// PATH: '/foo.ts'
//
export namespace MetadataValue {
  export type Foo = string;
}

export const MetadataValue = {
  doThing() {
    return 5;
  },
};

export function foo() {
  return 5;
}
"
`;

exports[`processProject Properly handles conflict with import 1`] = `
"//

//
// PATH: '/foo.ts'
//
import { bar as bar0 } from "lib";

export function baz() {
  return baz;
}

export const bar = () => {
  return bar0();
};
"
`;

exports[`processProject Properly handles conflict with module local variable or function 1`] = `
"//

//
// PATH: '/foo.ts'
//
function bar0() {
  return 5;
}
const baz0 = 5;

export function baz() {
  return baz0;
}

export const bar = () => {
  return bar0();
};
"
`;

exports[`processProject Renames import specifiers as needed 1`] = `
"//

//
// PATH: '/foo.ts'
//
import { bar as bar0 } from "lib";
import baz0 from "lib2";

// direct function
export function baz() {
  return bar0() + baz0();
}

export const bar = () => {
  return baz();
};
"
`;

exports[`processProject Renames star imports as needed 1`] = `
"//

//
// PATH: '/foo.ts'
//
import * as otherStar from "other";
import otherDefault, { other } from "other";

import * as bar0 from "lib";

// direct function
export function baz() {
  return bar0.baz() + other + otherStar.foo + otherDefault;
}

export const bar = () => {
  return baz();
};
"
`;

exports[`processProject Simple additional renames work 1`] = `
"//

//
// PATH: '/foo.ts'
//
import { FooProps } from "lib";
export type MyProps = FooProps;
"
`;

exports[`processProject Twins in namespace 1`] = `
"//

//
// PATH: '/index.ts'
//
export interface State {}

export const STATE_ROOT_KEY = "state";
export type STATE_ROOT_KEY = typeof STATE_ROOT_KEY;
"
`;

exports[`processProject combined types 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export interface OgreProps {
  properties: Property<any>[];
}

export interface ReduxProps {
  appRealmId: RealmId;
  mapConfig: GaiaMapConfig;
}

export interface State {
  map?: MapSearchResult;
  user?: IAcmeUser;
  isLoading: boolean;
}

export type Props = OverviewObjectMinProps & OgreProps & ReduxProps;
"
`;

exports[`processProject doesnt clobber component exports 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export interface Props {
  what: number;
}

export class Foo extends React.Component<Props> {}
,//

//
// PATH: '/index.ts'
//
export { Foo, type Props as FooProps } from "./foo";
"
`;

exports[`processProject dont explode if error 1`] = `
"//

//
// PATH: '/foo.ts'
//
const foo0 = 5;

export const foo = 6;
"
`;

exports[`processProject function invoke within namespace 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export function barForFoo() {
  bazForFoo();
}

export function bazForFoo() {
  return 5;
}

export function Foo() {}
"
`;

exports[`processProject function invoke within namespace exclusive 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export function bar() {
  baz();
}

export function baz() {
  return 5;
}
"
`;

exports[`processProject redeclare export 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export function bar() {
  return 5;
}

export function baz() {
  return 5;
}

export type Thing = string;

export interface OtherThing {
  what: Thing;
}
,//

//
// PATH: '/index.ts'
//
export * as Foo from "./foo";
"
`;

exports[`processProject redeclare export w funky names 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export type ThingBar = string;

export const doFoo = () => 5;

export const VAR_BAR = 5;
,//

//
// PATH: '/index.ts'
//
export * as FooBar from "./foo";
"
`;

exports[`processProject redeclare export with ordering 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export interface Thing {
  what: Thing;
}
,//

//
// PATH: '/index.ts'
//
export const before = 5;
export * as Foo from "./foo";
export const after = 5;
"
`;

exports[`processProject rename in other file exclusive 1`] = `
"//

//
// PATH: '/refWat.ts'
//
import * as Wat from "./wat";

console.log(Wat.key);
console.log(Wat.f());
console.log(new Wat.Foo());
const f: Wat.Baz = "hi";
,//

//
// PATH: '/wat.ts'
//

export const key = 3;
export function f() {
  return 5;
}

export class Foo {}

export type Baz = string;
"
`;

exports[`processProject rename in other file non-exclusive 1`] = `
"//

//
// PATH: '/refWat.ts'
//
import { BazForWat, FooForWat, fForWat, keyForWat } from "./wat";

console.log(keyForWat);
console.log(fForWat());
console.log(new FooForWat());
const f: BazForWat = "hi";
,//

//
// PATH: '/wat.ts'
//

export const keyForWat = 3;
export function fForWat() {
  return 5;
}

export class FooForWat {}

export type BazForWat = string;

export function Wat() {}
"
`;

exports[`processProject simple 1`] = `
"//

//
// PATH: '/foo.ts'
//
const foo = 5;

export const aasdfForWat = 3;
export const secondForWat = 5;

export const thirdSpacedForWat = 56;

// Foo
export const fourthWithCommentForWat = 555;

export function Wat() {}
"
`;

exports[`processProject simple exclusive 1`] = `
"//

//
// PATH: '/foo.ts'
//
const foo = 5;

export const aasdf = 3;
export const second = 5;

export const thirdSpaced = 56;

// Foo
export const fourthWithComment = 555;
"
`;

exports[`processProject works nicely with interfaces 1`] = `
"//

//
// PATH: '/foo.tsx'
//

export interface Props {
  what: number;
}

class Foo extends React.Component<Foo.Props> {}
,//

//
// PATH: '/index.ts'
//
export * as Foo from "./foo";
"
`;
